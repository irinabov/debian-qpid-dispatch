{
  "prefix": "org.apache.qpid.dispatch",
  "entityTypes": {
    "dummy": {
      "operations": [
        "CREATE",
        "READ",
        "UPDATE",
        "DELETE",
        "CALLME"
      ],
      "attributes": {
        "num1": {
          "type": "integer"
        },
        "num2": {
          "type": "integer"
        },
        "arg1": {
          "type": "string"
        },
        "arg2": {
          "type": "string"
        },
        "identity": {
          "unique": true,
          "type": "string",
          "description": "Unique identity generated by the system. Will not change."
        },
        "name": {
          "unique": true,
          "type": "string",
          "description": "Unique name optionally assigned by user. Can be changed."
        }
      },
      "fullyQualifiedType": "org.apache.qpid.dispatch.dummy",
      "description": "Dummy entity for test purposes."
    },
    "entity": {
      "attributes": {
        "name": {
          "unique": true,
          "type": "string",
          "description": "Unique name optionally assigned by user. Can be changed."
        },
        "identity": {
          "unique": true,
          "type": "string",
          "description": "Unique identity generated by the system. Will not change."
        }
      },
      "fullyQualifiedType": "org.apache.qpid.dispatch.entity",
      "description": "Base entity type for all entities."
    },
    "sslProfile": {
      "operations": [
        "CREATE",
        "DELETE",
        "READ"
      ],
      "attributes": {
        "certFile": {
          "type": "path",
          "description": "The absolute path to the file containing the PEM-formatted public certificate to be used on the local end of any connections using this profile."
        },
        "displayNameFile": {
          "type": "string",
          "description": "The absolute path to the file containing the unique id to dispay name mapping"
        },
        "uidFormat": {
          "type": "string",
          "description": "A list of x509 client certificate fields that will be used to build a string that will uniquely identify the client certificate owner. For e.g. a value of 'cou' indicates that the uid will consist of c - common name concatenated with o - organization-company name concatenated with u - organization unit; or a value of 'o2' indicates that the uid will consist of o (organization name) concatenated with 2 (the sha256 fingerprint of the entire certificate) . Allowed values can be any combination of 'c'( ISO3166 two character country code), 's'(state or province), 'l'(Locality; generally - city), 'o'(Organization - Company Name), 'u'(Organization Unit - typically certificate type or brand), 'n'(CommonName - typically a user name for client certificates) and '1'(sha1 certificate fingerprint, as displayed in the fingerprints section when looking at a certificate with say a web browser is the hash of the entire certificate) and 2 (sha256 certificate fingerprint) and 5 (sha512 certificate fingerprint). "
        },
        "certDb": {
          "type": "path",
          "description": "The absolute path to the database that contains the public certificates of trusted certificate authorities (CA)."
        },
        "passwordFile": {
          "type": "path",
          "description": "If the above private key is password protected, this is the absolute path to a file containing the password that unlocks the certificate key."
        },
        "password": {
          "type": "string",
          "description": "An alternative to storing the password in a file referenced by passwordFile is to supply the password right here in the configuration file.  This option can be used by supplying the password in the 'password' option.  Don't use both password and passwordFile in the same profile."
        },
        "keyFile": {
          "type": "path",
          "description": "The absolute path to the file containing the PEM-formatted private key for the above certificate."
        },
        "identity": {
          "unique": true,
          "type": "string",
          "description": "Unique identity generated by the system. Will not change."
        },
        "name": {
          "unique": true,
          "type": "string",
          "description": "Unique name optionally assigned by user. Can be changed."
        }
      },
      "fullyQualifiedType": "org.apache.qpid.dispatch.sslProfile",
      "description": "Attributes for setting TLS/SSL configuration for connections."
    },
    "linkRoute": {
      "operations": [
        "CREATE",
        "DELETE",
        "READ"
      ],
      "attributes": {
        "containerId": {
          "type": "string",
          "description": "ContainerID for the target container"
        },
        "operStatus": {
          "type": [
            "inactive",
            "active"
          ],
          "description": "The operational status of this linkRoute: inactive - The remote container is not connected; active - the remote container is connected and ready to accept link routed attachments."
        },
        "prefix": {
          "required": true,
          "type": "string",
          "description": "The address prefix for the configured settings"
        },
        "connection": {
          "type": "string",
          "description": "The name from a connector or listener"
        },
        "identity": {
          "unique": true,
          "type": "string",
          "description": "Unique identity generated by the system. Will not change."
        },
        "distribution": {
          "default": "linkBalanced",
          "type": [
            "linkBalanced"
          ],
          "description": "Treatment of traffic associated with the address"
        },
        "dir": {
          "required": true,
          "type": [
            "in",
            "out"
          ],
          "description": "The permitted direction of links: 'in' means client senders; 'out' means client receivers"
        },
        "name": {
          "unique": true,
          "type": "string",
          "description": "Unique name optionally assigned by user. Can be changed."
        }
      },
      "fullyQualifiedType": "org.apache.qpid.dispatch.router.config.linkRoute",
      "description": "Entity type for link-route configuration.  This is used to identify remote containers that shall be destinations for routed link-attaches.  The link-routing configuration applies to an addressing space defined by a prefix."
    },
    "allocator": {
      "operations": [
        "READ"
      ],
      "attributes": {
        "heldByThreads": {
          "graph": true,
          "type": "integer"
        },
        "typeSize": {
          "type": "integer"
        },
        "transferBatchSize": {
          "type": "integer"
        },
        "globalFreeListMax": {
          "graph": true,
          "type": "integer"
        },
        "batchesRebalancedToGlobal": {
          "graph": true,
          "type": "integer"
        },
        "typeName": {
          "type": "string"
        },
        "batchesRebalancedToThreads": {
          "graph": true,
          "type": "integer"
        },
        "totalFreeToHeap": {
          "graph": true,
          "type": "integer"
        },
        "totalAllocFromHeap": {
          "graph": true,
          "type": "integer"
        },
        "localFreeListMax": {
          "graph": true,
          "type": "integer"
        },
        "identity": {
          "unique": true,
          "type": "string",
          "description": "Unique identity generated by the system. Will not change."
        },
        "name": {
          "unique": true,
          "type": "string",
          "description": "Unique name optionally assigned by user. Can be changed."
        }
      },
      "fullyQualifiedType": "org.apache.qpid.dispatch.allocator",
      "description": "Memory allocation pool."
    },
    "management": {
      "operations": [
        "GET-SCHEMA",
        "GET-JSON-SCHEMA",
        "GET-LOG",
        "PROFILE",
        "QUERY",
        "GET-TYPES",
        "GET-ANNOTATIONS",
        "GET-OPERATIONS",
        "GET-ATTRIBUTES",
        "GET-MGMT-NODES",
        "READ"
      ],
      "attributes": {
        "name": {
          "unique": true,
          "type": "string",
          "description": "Unique name optionally assigned by user. Can be changed."
        },
        "identity": {
          "unique": true,
          "type": "string",
          "description": "Unique identity generated by the system. Will not change."
        }
      },
      "singleton": true,
      "fullyQualifiedType": "org.apache.qpid.dispatch.management",
      "description": "Qpid dispatch router extensions to the standard org.amqp.management interface."
    },
    "console": {
      "operations": [
        "READ"
      ],
      "attributes": {
        "name": {
          "unique": true,
          "type": "string",
          "description": "Unique name optionally assigned by user. Can be changed."
        },
        "args": {
          "type": "string",
          "description": "Optional args to pass the proxy program for logging, authentication, etc."
        },
        "listener": {
          "type": "string",
          "description": "The name of the listener to send the proxied tcp traffic to."
        },
        "proxy": {
          "type": "string",
          "description": "The full path to the proxy program to run."
        },
        "home": {
          "type": "string",
          "description": "The full path to the html/css/js files for the console."
        },
        "wsport": {
          "default": 5673,
          "type": "integer",
          "description": "port on which to listen for websocket traffic"
        },
        "identity": {
          "unique": true,
          "type": "string",
          "description": "Unique identity generated by the system. Will not change."
        }
      },
      "singleton": true,
      "fullyQualifiedType": "org.apache.qpid.dispatch.console",
      "description": "Start a websocket/tcp proxy and http file server to serve the web console"
    },
    "log": {
      "operations": [
        "UPDATE",
        "READ"
      ],
      "attributes": {
        "enable": {
          "type": "string",
          "description": "Levels are: trace, debug, info, notice, warning, error, critical. The enable string is a comma-separated list of levels. A level may have a trailing '\\+' to enable that level and above. For example 'trace,debug,warning+' means enable trace, debug, warning, error and critical. The value 'none' means disable logging for the module."
        },
        "name": {
          "unique": true,
          "type": "string",
          "description": "Unique name optionally assigned by user. Can be changed."
        },
        "timestamp": {
          "type": "boolean",
          "description": "Include timestamp in log messages."
        },
        "module": {
          "required": true,
          "type": [
            "ROUTER",
            "ROUTER_CORE",
            "ROUTER_HELLO",
            "ROUTER_LS",
            "ROUTER_MA",
            "MESSAGE",
            "SERVER",
            "AGENT",
            "CONTAINER",
            "ERROR",
            "POLICY",
            "DEFAULT"
          ],
          "description": "Module to configure. The special module 'DEFAULT' specifies defaults for all modules."
        },
        "source": {
          "type": "boolean",
          "description": "Include source file and line number in log messages."
        },
        "output": {
          "type": "string",
          "description": "Where to send log messages. Can be 'stderr', 'stdout', 'syslog' or a file name."
        },
        "identity": {
          "unique": true,
          "type": "string",
          "description": "Unique identity generated by the system. Will not change."
        }
      },
      "fullyQualifiedType": "org.apache.qpid.dispatch.log",
      "description": "Configure logging for a particular module. You can use the `UPDATE` operation to change log settings while the router is running."
    },
    "connector": {
      "operations": [
        "CREATE",
        "DELETE",
        "READ"
      ],
      "attributes": {
        "linkCapacity": {
          "type": "integer",
          "description": "The capacity of links within this connection, in terms of message deliveries.  The capacity is the number of messages that can be in-flight concurrently for each link."
        },
        "verifyHostName": {
          "default": true,
          "type": "boolean",
          "description": "yes: Ensures that when initiating a connection (as a client) the host name in the URL to which this connector connects to matches the host name in the digital certificate that the peer sends back as part of the SSL connection; no: Does not perform host name verification"
        },
        "cost": {
          "default": "1",
          "type": "integer",
          "description": "For the 'inter-router' role only.  This value assigns a cost metric to the inter-router connection.  The default (and minimum) value is one.  Higher values represent higher costs.  The cost is used to influence the routing algorithm as it attempts to use the path with the lowest total cost from ingress to egress."
        },
        "addr": {
          "default": "127.0.0.1",
          "deprecated": true,
          "type": "string",
          "description": "(DEPRECATED)IP address: ipv4 or ipv6 literal or a host name. This attribute has been deprecated. Use host instead"
        },
        "maxSessions": {
          "default": 32768,
          "type": "integer",
          "description": "The maximum number of sessions that can be simultaneously active on the connection. Setting this value to zero selects the default number of sessions. Policy settings will not overwrite this value. Defaults to 32768."
        },
        "saslUsername": {
          "type": "string",
          "description": "The user name that the connector is using to connect to a peer."
        },
        "allowRedirect": {
          "default": true,
          "type": "boolean",
          "description": "Allow the peer to redirect this connection to another address."
        },
        "idleTimeoutSeconds": {
          "default": 16,
          "type": "integer",
          "description": "The idle timeout, in seconds, for connections through this connector.  If no frames are received on the connection for this time interval, the connection shall be closed."
        },
        "saslMechanisms": {
          "type": "string",
          "description": "Space separated list of accepted SASL authentication mechanisms."
        },
        "maxFrameSize": {
          "default": 16384,
          "type": "integer",
          "description": "The maximum frame size in octets that will be used in the connection-open negotiation with a connected peer.  The frame size is the largest contiguous set of uninterrupted data that can be sent for a message delivery over the connection. Interleaving of messages on different links is done at frame granularity. Policy settings will not overwrite this value. Defaults to 16384."
        },
        "maxSessionFrames": {
          "default": 100,
          "type": "integer",
          "description": "Session incoming window measured in transfer frames for sessions created on this connection. This is the number of transfer frames that may simultaneously be in flight for all links in the session. Setting this value to zero selects the default session window size. Policy settings will not overwrite this value. The numerical product of maxFrameSize and maxSessionFrames may not exceed 2^31-1. If (maxFrameSize x maxSessionFrames) exceeds 2^31-1 then maxSessionFrames is reduced to (2^31-1 / maxFrameSize). maxSessionFrames has a minimum value of 1. Defaults to 100."
        },
        "host": {
          "default": "127.0.0.1",
          "type": "string",
          "description": "IP address: ipv4 or ipv6 literal or a host name"
        },
        "sslProfile": {
          "type": "string",
          "description": "Name of the sslProfile."
        },
        "role": {
          "default": "normal",
          "type": [
            "normal",
            "inter-router",
            "route-container",
            "on-demand"
          ],
          "description": "The role of an established connection. In the normal role, the connection is assumed to be used for AMQP clients that are doing normal message delivery over the connection.  In the inter-router role, the connection is assumed to be to another router in the network.  Inter-router discovery and routing protocols can only be used over inter-router connections. route-container role can be used for router-container connections, for example, a router-broker connection. on-demand role has been deprecated."
        },
        "saslPassword": {
          "type": "string",
          "description": "The password that the connector is using to connect to a peer."
        },
        "stripAnnotations": {
          "default": "both",
          "type": [
            "in",
            "out",
            "both",
            "no"
          ],
          "description": "['in', 'out', 'both', 'no'] in: Strip the dispatch router specific annotations only on ingress; out: Strip the dispatch router specific annotations only on egress; both: Strip the dispatch router specific annotations on both ingress and egress; no - do not strip dispatch router specific annotations"
        },
        "protocolFamily": {
          "type": [
            "IPv4",
            "IPv6"
          ],
          "description": "['IPv4', 'IPv6'] IPv4: Internet Protocol version 4; IPv6: Internet Protocol version 6.  If not specified, the protocol family will be automatically determined from the address."
        },
        "port": {
          "default": "amqp",
          "type": "string",
          "description": "Port number or symbolic service name."
        },
        "identity": {
          "unique": true,
          "type": "string",
          "description": "Unique identity generated by the system. Will not change."
        },
        "name": {
          "unique": true,
          "type": "string",
          "description": "Unique name optionally assigned by user. Can be changed."
        }
      },
      "fullyQualifiedType": "org.apache.qpid.dispatch.connector",
      "description": "Establishes an outgoing connection from the router."
    },
    "waypoint": {
      "operations": [
        "CREATE",
        "DELETE",
        "READ"
      ],
      "attributes": {
        "name": {
          "unique": true,
          "type": "string",
          "description": "Unique name optionally assigned by user. Can be changed."
        },
        "inPhase": {
          "default": -1,
          "type": "integer",
          "description": "The phase of the address as it is routed _to_ the waypoint."
        },
        "connector": {
          "required": true,
          "type": "string",
          "description": "The name of the on-demand connector used to reach the waypoint's container."
        },
        "outPhase": {
          "default": -1,
          "type": "integer",
          "description": "The phase of the address as it is routed _from_ the waypoint."
        },
        "address": {
          "required": true,
          "type": "string",
          "description": "The AMQP address of the waypoint."
        },
        "identity": {
          "unique": true,
          "type": "string",
          "description": "Unique identity generated by the system. Will not change."
        }
      },
      "fullyQualifiedType": "org.apache.qpid.dispatch.waypoint",
      "description": "(DEPRECATED) A remote node that messages for an address pass through. This entity has been deprecated. Use autoLink instead",
      "deprecated": true
    },
    "policy": {
      "operations": [
        "READ"
      ],
      "attributes": {
        "connectionsProcessed": {
          "graph": true,
          "type": "integer"
        },
        "policyDir": {
          "type": "path",
          "description": "Absolute path to a directory that holds vhost definition .json files. All vhost definitions in all .json files in this directory are processed."
        },
        "defaultVhost": {
          "default": "$default",
          "type": "string",
          "description": "Vhost rule set name to use for connections with a vhost that is otherwise not defined. Default vhost processing may be disabled either by erasing the definition of defaultVhost or by not defining a vhost object named '$default'."
        },
        "connectionsDenied": {
          "graph": true,
          "type": "integer"
        },
        "enableVhostPolicy": {
          "type": "boolean",
          "description": "Enable vhost policy user groups, connection denial, and resource limit enforcement"
        },
        "maxConnections": {
          "default": 65535,
          "type": "integer",
          "description": "Global maximum number of concurrent client connections allowed. This limit is always enforced even if no other policy settings have been defined."
        },
        "connectionsCurrent": {
          "graph": true,
          "type": "integer"
        },
        "identity": {
          "unique": true,
          "type": "string",
          "description": "Unique identity generated by the system. Will not change."
        },
        "name": {
          "unique": true,
          "type": "string",
          "description": "Unique name optionally assigned by user. Can be changed."
        }
      },
      "singleton": true,
      "fullyQualifiedType": "org.apache.qpid.dispatch.policy",
      "description": "Defines global connection limit"
    },
    "fixedAddress": {
      "operations": [
        "CREATE",
        "READ"
      ],
      "attributes": {
        "name": {
          "unique": true,
          "type": "string",
          "description": "Unique name optionally assigned by user. Can be changed."
        },
        "bias": {
          "default": "closest",
          "type": [
            "closest",
            "spread"
          ],
          "description": "Only if fanout is single.  One of 'closest' or 'spread'.  Closest bias means that messages to an address will always be delivered to the closest (lowest cost) subscribed consumer. Spread bias will distribute the messages across subscribers in an approximately even manner."
        },
        "prefix": {
          "required": true,
          "type": "string",
          "description": "The address prefix (always starting with '/')."
        },
        "fanout": {
          "default": "multiple",
          "type": [
            "multiple",
            "single"
          ],
          "description": "One of 'multiple' or 'single'.  Multiple fanout is a non-competing pattern.  If there are multiple consumers using the same address, each consumer will receive its own copy of every message sent to the address.  Single fanout is a competing pattern where each message is sent to only one consumer."
        },
        "phase": {
          "type": "integer",
          "description": "The phase of a multi-hop address passing through one or more waypoints."
        },
        "identity": {
          "unique": true,
          "type": "string",
          "description": "Unique identity generated by the system. Will not change."
        }
      },
      "fullyQualifiedType": "org.apache.qpid.dispatch.fixedAddress",
      "description": "(DEPRECATED) Establishes treatment for addresses starting with a prefix. This entity has been deprecated. Use address instead",
      "deprecated": true
    },
    "linkRoutePattern": {
      "operations": [
        "CREATE",
        "READ"
      ],
      "attributes": {
        "connector": {
          "type": "string",
          "description": "The name of the on-demand connector used to reach the target node's container.  If this value is not provided, it means that the target container is expected to be connected to a different router in the network.  This prevents links to a link-routable address from being misinterpreted as message-routing links when there is no route to a valid destination available."
        },
        "prefix": {
          "required": true,
          "type": "string",
          "description": "An address prefix to match against target and source addresses.  This pattern must be of the form '<text>.<text1>.<textN>' or '<text>' or '<text>.' and matches any address that contains that prefix.  For example, if the prefix is set to org.apache (or org.apache.), any address that has the prefix 'org.apache'  (like org.apache.dev) will match. Note that a prefix must not start with a (.), can end in a (.) and can contain zero or more dots (.).  Any characters between the dots are simply treated as part of the address"
        },
        "identity": {
          "unique": true,
          "type": "string",
          "description": "Unique identity generated by the system. Will not change."
        },
        "name": {
          "unique": true,
          "type": "string",
          "description": "Unique name optionally assigned by user. Can be changed."
        },
        "dir": {
          "default": "both",
          "type": [
            "in",
            "out",
            "both"
          ],
          "description": "Link direction for match: 'in' matches only links inbound to the client; 'out' matches only links outbound from the client; 'both' matches any link."
        }
      },
      "fullyQualifiedType": "org.apache.qpid.dispatch.linkRoutePattern",
      "description": "(DEPRECATED) An address pattern to match against link sources and targets to cause the router to link-route the attach across the network to a remote node. This entity has been deprecated. Use linkRoute instead",
      "deprecated": true
    },
    "vhostStats": {
      "operations": [
        "READ"
      ],
      "attributes": {
        "name": {
          "unique": true,
          "type": "string",
          "description": "Unique name optionally assigned by user. Can be changed."
        },
        "perHostState": {
          "type": "map",
          "description": "A map where the key is the host name and the value is a list of the host's connections."
        },
        "perUserState": {
          "type": "map",
          "description": "A map where the key is the authenticated user name and the value is a list of the user's connections."
        },
        "sessionDenied": {
          "graph": true,
          "type": "integer"
        },
        "connectionsApproved": {
          "graph": true,
          "type": "integer"
        },
        "receiverDenied": {
          "graph": true,
          "type": "integer"
        },
        "connectionsCurrent": {
          "graph": true,
          "type": "integer"
        },
        "senderDenied": {
          "graph": true,
          "type": "integer"
        },
        "connectionsDenied": {
          "graph": true,
          "type": "integer"
        },
        "id": {
          "type": "string",
          "description": "The vhost name."
        },
        "identity": {
          "unique": true,
          "type": "string",
          "description": "Unique identity generated by the system. Will not change."
        }
      },
      "fullyQualifiedType": "org.apache.qpid.dispatch.vhostStats",
      "description": "Virtual host connection and access statistics."
    },
    "listener": {
      "operations": [
        "CREATE",
        "DELETE",
        "READ"
      ],
      "attributes": {
        "stripAnnotations": {
          "default": "both",
          "type": [
            "in",
            "out",
            "both",
            "no"
          ],
          "description": "['in', 'out', 'both', 'no'] in: Strip the dispatch router specific annotations only on ingress; out: Strip the dispatch router specific annotations only on egress; both: Strip the dispatch router specific annotations on both ingress and egress; no - do not strip dispatch router specific annotations"
        },
        "requireSsl": {
          "type": "boolean",
          "description": "yes: Require the use of SSL or TLS on the connection; no: Allow clients to connect without SSL or TLS."
        },
        "idleTimeoutSeconds": {
          "default": 16,
          "type": "integer",
          "description": "The idle timeout, in seconds, for connections through this listener.  If no frames are received on the connection for this time interval, the connection shall be closed."
        },
        "trustedCerts": {
          "type": "path",
          "description": "This optional setting can be used to reduce the set of available CAs for client authentication.  If used, this setting must provide the absolute path to a PEM file that contains the trusted certificates."
        },
        "maxSessionFrames": {
          "default": 100,
          "type": "integer",
          "description": "Session incoming window measured in transfer frames for sessions created on this connection. This is the number of transfer frames that may simultaneously be in flight for all links in the session. Setting this value to zero selects the default session window size. Policy settings, if specified, will overwrite this value. The numerical product of maxFrameSize and maxSessionFrames may not exceed 2^31-1. If (maxFrameSize x maxSessionFrames) exceeds 2^31-1 then maxSessionFrames is reduced to (2^31-1 / maxFrameSize). maxSessionFrames has a minimum value of 1. Defaults to 100."
        },
        "cost": {
          "default": "1",
          "type": "integer",
          "description": "For the 'inter-router' role only.  This value assigns a cost metric to the inter-router connection.  The default (and minimum) value is one.  Higher values represent higher costs.  The cost is used to influence the routing algorithm as it attempts to use the path with the lowest total cost from ingress to egress."
        },
        "port": {
          "default": "amqp",
          "type": "string",
          "description": "Port number or symbolic service name."
        },
        "allowNoSasl": {
          "deprecated": true,
          "type": "boolean",
          "description": "(DEPRECATED) This attribute is now controlled by the authenticatePeer attribute."
        },
        "addr": {
          "default": "127.0.0.1",
          "deprecated": true,
          "type": "string",
          "description": "(DEPRECATED)IP address: ipv4 or ipv6 literal or a host name. This attribute has been deprecated. Use host instead"
        },
        "saslMechanisms": {
          "type": "string",
          "description": "Space separated list of accepted SASL authentication mechanisms."
        },
        "requireEncryption": {
          "type": "boolean",
          "description": "yes: Require the connection to the peer to be encrypted; no: Permit non-encrypted communication with the peer"
        },
        "linkCapacity": {
          "type": "integer",
          "description": "The capacity of links within this connection, in terms of message deliveries.  The capacity is the number of messages that can be in-flight concurrently for each link."
        },
        "requirePeerAuth": {
          "deprecated": true,
          "type": "boolean",
          "description": "(DEPRECATED) This attribute is now controlled by the authenticatePeer attribute."
        },
        "role": {
          "default": "normal",
          "type": [
            "normal",
            "inter-router",
            "route-container",
            "on-demand"
          ],
          "description": "The role of an established connection. In the normal role, the connection is assumed to be used for AMQP clients that are doing normal message delivery over the connection.  In the inter-router role, the connection is assumed to be to another router in the network.  Inter-router discovery and routing protocols can only be used over inter-router connections. route-container role can be used for router-container connections, for example, a router-broker connection. on-demand role has been deprecated."
        },
        "maxSessions": {
          "default": 32768,
          "type": "integer",
          "description": "The maximum number of sessions that can be simultaneously active on the connection. Setting this value to zero selects the default number of sessions. Policy settings, if specified, will overwrite this value. Defaults to 32768."
        },
        "authenticatePeer": {
          "type": "boolean",
          "description": "yes: Require the peer's identity to be authenticated; no: Do not require any authentication."
        },
        "host": {
          "default": "127.0.0.1",
          "type": "string",
          "description": "IP address: ipv4 or ipv6 literal or a host name"
        },
        "allowUnsecured": {
          "deprecated": true,
          "type": "boolean",
          "description": "(DEPRECATED) This attribute is now controlled by the requireEncryption attribute."
        },
        "protocolFamily": {
          "type": [
            "IPv4",
            "IPv6"
          ],
          "description": "['IPv4', 'IPv6'] IPv4: Internet Protocol version 4; IPv6: Internet Protocol version 6.  If not specified, the protocol family will be automatically determined from the address."
        },
        "identity": {
          "unique": true,
          "type": "string",
          "description": "Unique identity generated by the system. Will not change."
        },
        "name": {
          "unique": true,
          "type": "string",
          "description": "Unique name optionally assigned by user. Can be changed."
        },
        "maxFrameSize": {
          "default": 16384,
          "type": "integer",
          "description": "The maximum frame size in octets that will be used in the connection-open negotiation with a connected peer.  The frame size is the largest contiguous set of uninterrupted data that can be sent for a message delivery over the connection. Interleaving of messages on different links is done at frame granularity. Policy settings, if specified, will overwrite this value. Defaults to 16384."
        },
        "sslProfile": {
          "type": "string",
          "description": "Name of the sslProfile."
        }
      },
      "fullyQualifiedType": "org.apache.qpid.dispatch.listener",
      "description": "Listens for incoming connections to the router."
    },
    "configurationEntity": {
      "operations": [
        "READ"
      ],
      "attributes": {
        "name": {
          "unique": true,
          "type": "string",
          "description": "Unique name optionally assigned by user. Can be changed."
        },
        "identity": {
          "unique": true,
          "type": "string",
          "description": "Unique identity generated by the system. Will not change."
        }
      },
      "fullyQualifiedType": "org.apache.qpid.dispatch.configurationEntity",
      "description": "Base type for entities containing configuration information."
    },
    "address": {
      "operations": [
        "CREATE",
        "DELETE",
        "READ"
      ],
      "attributes": {
        "egressPhase": {
          "type": "integer",
          "description": "Advanced - Override the egress phase for this address"
        },
        "ingressPhase": {
          "type": "integer",
          "description": "Advanced - Override the ingress phase for this address"
        },
        "prefix": {
          "required": true,
          "type": "string",
          "description": "The address prefix for the configured settings"
        },
        "waypoint": {
          "type": "boolean",
          "description": "Designates this address space as being used for waypoints.  This will cause the proper address-phasing to be used."
        },
        "distribution": {
          "default": "balanced",
          "type": [
            "multicast",
            "closest",
            "balanced"
          ],
          "description": "Treatment of traffic associated with the address"
        },
        "identity": {
          "unique": true,
          "type": "string",
          "description": "Unique identity generated by the system. Will not change."
        },
        "name": {
          "unique": true,
          "type": "string",
          "description": "Unique name optionally assigned by user. Can be changed."
        }
      },
      "fullyQualifiedType": "org.apache.qpid.dispatch.router.config.address",
      "description": "Entity type for address configuration.  This is used to configure the treatment of message-routed deliveries within a particular address-space.  The configuration controls distribution and address phasing."
    },
    "container": {
      "operations": [
        "READ"
      ],
      "singleton": true,
      "fullyQualifiedType": "org.apache.qpid.dispatch.container",
      "description": "(DEPRECATED)Attributes related to the AMQP container. This entity has been deprecated. Use the router entity instead.",
      "deprecated": true,
      "attributes": {
        "containerName": {
          "type": "string",
          "description": "The  name of the AMQP container.  If not specified, the container name will be set to a value of the container's choosing.  The automatically assigned container name is not guaranteed to be persistent across restarts of the container."
        },
        "debugDump": {
          "type": "path",
          "description": "A file to dump debugging information that can't be logged normally."
        },
        "workerThreads": {
          "default": 4,
          "type": "integer",
          "description": "The number of threads that will be created to process message traffic and other application work (timers, non-amqp file descriptors, etc.) ."
        },
        "name": {
          "unique": true,
          "type": "string",
          "description": "Unique name optionally assigned by user. Can be changed."
        },
        "saslConfigName": {
          "type": "string",
          "description": "Name of the SASL configuration.  This string + '.conf' is the name of the configuration file."
        },
        "saslConfigPath": {
          "type": "path",
          "description": "Absolute path to the SASL configuration file."
        },
        "identity": {
          "unique": true,
          "type": "string",
          "description": "Unique identity generated by the system. Will not change."
        }
      }
    },
    "router.node": {
      "operations": [
        "READ"
      ],
      "attributes": {
        "routerLink": {
          "type": "entityId",
          "description": "Local link to remote node"
        },
        "nextHop": {
          "type": "string",
          "description": "Neighbour ID of next hop to remote node from here."
        },
        "name": {
          "unique": true,
          "type": "string",
          "description": "Unique name optionally assigned by user. Can be changed."
        },
        "validOrigins": {
          "type": "list",
          "description": "List of valid origin nodes for messages arriving via the re mote node, used for duplicate elimination in redundant networks."
        },
        "linkState": {
          "type": "list",
          "description": "List of remote node's neighbours."
        },
        "instance": {
          "type": "integer",
          "description": "Remote node boot number."
        },
        "cost": {
          "type": "integer",
          "description": "Reachability cost"
        },
        "address": {
          "type": "string",
          "description": "Address of the remote node"
        },
        "id": {
          "type": "string",
          "description": "Remote node identifier."
        },
        "identity": {
          "unique": true,
          "type": "string",
          "description": "Unique identity generated by the system. Will not change."
        }
      },
      "fullyQualifiedType": "org.apache.qpid.dispatch.router.node",
      "description": "Remote router node connected to this router."
    },
    "autoLink": {
      "operations": [
        "CREATE",
        "DELETE",
        "READ"
      ],
      "attributes": {
        "addr": {
          "required": true,
          "type": "string",
          "description": "The address of the provisioned object"
        },
        "linkRef": {
          "type": "string",
          "description": "Reference to the org.apache.qpid.dispatch.router.link if the link exists"
        },
        "name": {
          "unique": true,
          "type": "string",
          "description": "Unique name optionally assigned by user. Can be changed."
        },
        "operStatus": {
          "type": [
            "inactive",
            "attaching",
            "failed",
            "active",
            "quiescing",
            "idle"
          ],
          "description": "The operational status of this autoLink: inactive - The remote container is not connected; attaching - the link is attaching to the remote node; failed - the link attach failed; active - the link is attached and operational; quiescing - the link is transitioning to idle state; idle - the link is attached but there are no deliveries flowing and no unsettled deliveries."
        },
        "connection": {
          "type": "string",
          "description": "The name from a connector or listener"
        },
        "identity": {
          "unique": true,
          "type": "string",
          "description": "Unique identity generated by the system. Will not change."
        },
        "phase": {
          "type": "integer",
          "description": "The address phase for this link.  Defaults to '0' for 'out' links and '1' for 'in' links."
        },
        "lastError": {
          "type": "string",
          "description": "The error description from the last attach failure"
        },
        "externalAddr": {
          "type": "string",
          "description": "If present, an alternate address of the node on the remote container.  This is used if the node has a different address than the address used internally by the router to route deliveries."
        },
        "dir": {
          "required": true,
          "type": [
            "in",
            "out"
          ],
          "description": "The direction of the link to be created.  In means into the router, out means out of the router."
        },
        "containerId": {
          "type": "string",
          "description": "ContainerID for the target container"
        }
      },
      "fullyQualifiedType": "org.apache.qpid.dispatch.router.config.autoLink",
      "description": "Entity type for configuring auto-links.  Auto-links are links whose lifecycle is managed by the router.  These are typically used to attach to waypoints on remote containers (brokers, etc.)."
    },
    "router.address": {
      "operations": [
        "READ"
      ],
      "attributes": {
        "subscriberCount": {
          "graph": true,
          "type": "integer",
          "description": "The number of local subscribers for this address (i.e. attached to this router)"
        },
        "deliveriesEgress": {
          "graph": true,
          "type": "integer",
          "description": "The number of deliveries to this address that exited the router network on this router"
        },
        "name": {
          "unique": true,
          "type": "string",
          "description": "Unique name optionally assigned by user. Can be changed."
        },
        "deliveriesIngress": {
          "graph": true,
          "type": "integer",
          "description": "The number of deliveries to this address that entered the router network on this router"
        },
        "transitOutstanding": {
          "type": "list",
          "description": "List of numbers of outstanding deliveries across a transit (inter-router) link for this address.  This is for balanced distribution only."
        },
        "remoteCount": {
          "graph": true,
          "type": "integer",
          "description": "The number of remote routers that have at least one subscriber to this address"
        },
        "inProcess": {
          "type": "integer",
          "description": "The number of in-process subscribers for this address"
        },
        "deliveriesFromContainer": {
          "graph": true,
          "type": "integer",
          "description": "The number of deliveries to this address that were originated from an in-process entity"
        },
        "deliveriesTransit": {
          "graph": true,
          "type": "integer",
          "description": "The number of deliveries to this address that transited this router to another router"
        },
        "containerCount": {
          "graph": true,
          "type": "integer",
          "description": "The number of attached containers that serve this route address"
        },
        "key": {
          "type": "string",
          "description": "Internal unique (to this router) key to identify the address"
        },
        "distribution": {
          "type": [
            "flood",
            "multicast",
            "closest",
            "balanced",
            "linkBalanced"
          ],
          "description": "Forwarding treatment for the address: flood - messages delivered to all subscribers along all available paths (this will cause duplicate deliveries if there are redundant paths); multi - one copy of each message delivered to all subscribers; anyClosest - messages delivered to only the closest subscriber; anyBalanced - messages delivered to one subscriber with load balanced across subscribers; linkBalanced - for link-routing, link attaches balanced across destinations."
        },
        "trackedDeliveries": {
          "type": "integer",
          "description": "Number of transit deliveries being tracked for this address (for balanced distribution)."
        },
        "deliveriesToContainer": {
          "graph": true,
          "type": "integer",
          "description": "The number of deliveries to this address that were given to an in-process subscriber"
        },
        "identity": {
          "unique": true,
          "type": "string",
          "description": "Unique identity generated by the system. Will not change."
        },
        "remoteHostRouters": {
          "type": "list",
          "description": "List of remote routers on which there is a destination for this address."
        }
      },
      "fullyQualifiedType": "org.apache.qpid.dispatch.router.address",
      "description": "AMQP address managed by the router."
    },
    "router.link": {
      "operations": [
        "UPDATE",
        "READ"
      ],
      "attributes": {
        "adminStatus": {
          "default": "enabled",
          "type": [
            "enabled",
            "disabled"
          ]
        },
        "linkType": {
          "type": [
            "endpoint",
            "router-control",
            "inter-router"
          ],
          "description": "Type of link: endpoint: a link to a normally connected endpoint; inter-router: a link to another router in the network."
        },
        "releasedCount": {
          "graph": true,
          "type": "integer",
          "description": "The total number of released deliveries."
        },
        "capacity": {
          "type": "integer",
          "description": "The capacity, in deliveries, for the link.  The number of undelivered plus unsettled deliveries shall not exceed the capacity.  This is enforced by link flow control."
        },
        "name": {
          "unique": true,
          "type": "string",
          "description": "Unique name optionally assigned by user. Can be changed."
        },
        "operStatus": {
          "type": [
            "up",
            "down",
            "quiescing",
            "idle"
          ]
        },
        "linkDir": {
          "type": [
            "in",
            "out"
          ],
          "description": "Direction of delivery flow over the link, inbound or outbound to or from the router."
        },
        "unsettledCount": {
          "graph": true,
          "type": "integer",
          "description": "The number of unsettled deliveries awaiting settlement on the link"
        },
        "acceptedCount": {
          "graph": true,
          "type": "integer",
          "description": "The total number of accepted deliveries."
        },
        "undeliveredCount": {
          "graph": true,
          "type": "integer",
          "description": "The number of undelivered messages pending for the link."
        },
        "owningAddr": {
          "type": "string",
          "description": "Address assigned to this link during attach: The target for inbound links or the source for outbound links."
        },
        "identity": {
          "unique": true,
          "type": "string",
          "description": "Unique identity generated by the system. Will not change."
        },
        "peer": {
          "type": "string",
          "description": "Identifier of the paired link if this is an attach-routed link."
        },
        "linkName": {
          "type": "string",
          "description": "Name assigned to the link in the Attach."
        },
        "presettledCount": {
          "graph": true,
          "type": "integer",
          "description": "The total number of pre-settled deliveries."
        },
        "deliveryCount": {
          "graph": true,
          "type": "integer",
          "description": "The total number of deliveries that have traversed this link."
        },
        "rejectedCount": {
          "graph": true,
          "type": "integer",
          "description": "The total number of rejected deliveries."
        },
        "modifiedCount": {
          "graph": true,
          "type": "integer",
          "description": "The total number of modified deliveries."
        },
        "connectionId": {
          "type": "integer",
          "description": "The connection id."
        }
      },
      "fullyQualifiedType": "org.apache.qpid.dispatch.router.link",
      "description": "Link to another AMQP endpoint: router node, client or other AMQP process."
    },
    "org.amqp.management": {
      "operations": [
        "QUERY",
        "GET-TYPES",
        "GET-ANNOTATIONS",
        "GET-OPERATIONS",
        "GET-ATTRIBUTES",
        "GET-MGMT-NODES",
        "READ"
      ],
      "attributes": {
        "name": {
          "unique": true,
          "type": "string",
          "description": "Unique name optionally assigned by user. Can be changed."
        },
        "identity": {
          "unique": true,
          "type": "string",
          "description": "Unique identity generated by the system. Will not change."
        }
      },
      "fullyQualifiedType": "org.apache.qpid.dispatch.org.amqp.management",
      "description": "The standard AMQP management node interface."
    },
    "operationalEntity": {
      "operations": [
        "READ"
      ],
      "attributes": {
        "name": {
          "unique": true,
          "type": "string",
          "description": "Unique name optionally assigned by user. Can be changed."
        },
        "identity": {
          "unique": true,
          "type": "string",
          "description": "Unique identity generated by the system. Will not change."
        }
      },
      "fullyQualifiedType": "org.apache.qpid.dispatch.operationalEntity",
      "description": "Base type for entities containing current operational information."
    },
    "connection": {
      "operations": [
        "READ"
      ],
      "attributes": {
        "container": {
          "type": "string",
          "description": "The container for this connection"
        },
        "opened": {
          "type": "boolean",
          "description": "The connection has been opened (i.e. AMQP OPEN)"
        },
        "sslCipher": {
          "type": "string",
          "description": "SSL cipher name"
        },
        "name": {
          "unique": true,
          "type": "string",
          "description": "Unique name optionally assigned by user. Can be changed."
        },
        "sslProto": {
          "type": "string",
          "description": "SSL protocol name"
        },
        "properties": {
          "type": "map",
          "description": "Connection properties supplied by the peer."
        },
        "ssl": {
          "type": "boolean",
          "description": "True iff SSL/TLS is in effect for this connection."
        },
        "host": {
          "type": "string",
          "description": "IP address and port number in the form addr:port."
        },
        "isEncrypted": {
          "type": "boolean",
          "description": "Indicates whether the connection content is encrypted."
        },
        "role": {
          "type": "string"
        },
        "isAuthenticated": {
          "type": "boolean",
          "description": "Indicates whether the identity of the connection's user is authentic."
        },
        "identity": {
          "unique": true,
          "type": "string",
          "description": "Unique identity generated by the system. Will not change."
        },
        "sasl": {
          "type": "string",
          "description": "SASL mechanism in effect for authentication."
        },
        "sslSsf": {
          "type": "integer",
          "description": "SSL strength factor in effect"
        },
        "dir": {
          "type": [
            "in",
            "out"
          ],
          "description": "Direction of connection establishment in or out of the router."
        },
        "user": {
          "type": "string",
          "description": "Identity of the authenticated user."
        }
      },
      "fullyQualifiedType": "org.apache.qpid.dispatch.connection",
      "description": "Connections to the router's container."
    },
    "router": {
      "operations": [
        "READ"
      ],
      "attributes": {
        "mobileAddrMaxAge": {
          "default": 60,
          "deprecated": true,
          "type": "integer",
          "description": "(DEPRECATED) This value is no longer used in the router."
        },
        "debugDump": {
          "type": "path",
          "description": "A file to dump debugging information that can't be logged normally."
        },
        "raIntervalFlux": {
          "default": 4,
          "type": "integer",
          "description": "Interval in seconds between Router-Advertisements sent to all routers during topology fluctuations."
        },
        "workerThreads": {
          "default": 4,
          "type": "integer",
          "description": "The number of threads that will be created to process message traffic and other application work (timers, non-amqp file descriptors, etc.) ."
        },
        "name": {
          "unique": true,
          "type": "string",
          "description": "Unique name optionally assigned by user. Can be changed."
        },
        "helloInterval": {
          "default": 1,
          "type": "integer",
          "description": "Interval in seconds between HELLO messages sent to neighbor routers."
        },
        "area": {
          "type": "string",
          "description": "Unused placeholder."
        },
        "helloMaxAge": {
          "default": 3,
          "type": "integer",
          "description": "Time in seconds after which a neighbor is declared lost if no HELLO is received."
        },
        "saslConfigPath": {
          "type": "path",
          "description": "Absolute path to the SASL configuration file."
        },
        "remoteLsMaxAge": {
          "default": 60,
          "type": "integer",
          "description": "Time in seconds after which link state is declared stale if no RA is received."
        },
        "addrCount": {
          "graph": true,
          "type": "integer",
          "description": "Number of addresses known to the router."
        },
        "routerId": {
          "deprecated": true,
          "type": "string",
          "description": "(DEPRECATED) Router's unique identity. This attribute has been deprecated. Use id instead"
        },
        "raInterval": {
          "default": 30,
          "type": "integer",
          "description": "Interval in seconds between Router-Advertisements sent to all routers in a stable network."
        },
        "mode": {
          "default": "standalone",
          "type": [
            "standalone",
            "interior"
          ],
          "description": "In standalone mode, the router operates as a single component.  It does not participate in the routing protocol and therefore will not cooperate with other routers. In interior mode, the router operates in cooperation with other interior routers in an interconnected network."
        },
        "nodeCount": {
          "graph": true,
          "type": "integer",
          "description": "Number of known peer router nodes."
        },
        "saslConfigName": {
          "default": "qdrouterd",
          "type": "string",
          "description": "Name of the SASL configuration.  This string + '.conf' is the name of the configuration file."
        },
        "linkCount": {
          "graph": true,
          "type": "integer",
          "description": "Number of links attached to the router node."
        },
        "id": {
          "type": "string",
          "description": "Router's unique identity. One of id or routerId is required. The router will fail to start without id or routerId"
        },
        "identity": {
          "unique": true,
          "type": "string",
          "description": "Unique identity generated by the system. Will not change."
        }
      },
      "singleton": true,
      "fullyQualifiedType": "org.apache.qpid.dispatch.router",
      "description": "Tracks peer routers and computes routes to destinations."
    },
    "vhost": {
      "operations": [
        "CREATE",
        "UPDATE",
        "DELETE",
        "READ"
      ],
      "attributes": {
        "allowUnknownUser": {
          "type": "boolean",
          "description": "Unrestricted users, those who are not members of a defined user group, are allowed to connect to this application. Unrestricted users are assigned to the 'default' user group and receive 'default' settings."
        },
        "maxConnectionsPerUser": {
          "default": 65535,
          "type": "integer",
          "description": "Maximum number of concurrent client connections allowed for any single user."
        },
        "groups": {
          "type": "map",
          "description": "A map where each key is a user group name and the value is a map of the corresponding settings for that group."
        },
        "maxConnections": {
          "default": 65535,
          "type": "integer",
          "description": "Maximum number of concurrent client connections allowed."
        },
        "maxConnectionsPerHost": {
          "default": 65535,
          "type": "integer",
          "description": "Maximum number of concurrent client connections allowed for any remote host."
        },
        "id": {
          "required": true,
          "type": "string",
          "description": "The vhost name."
        },
        "identity": {
          "unique": true,
          "type": "string",
          "description": "Unique identity generated by the system. Will not change."
        },
        "name": {
          "unique": true,
          "type": "string",
          "description": "Unique name optionally assigned by user. Can be changed."
        }
      },
      "fullyQualifiedType": "org.apache.qpid.dispatch.vhost",
      "description": "AMQP virtual host policy definition of users, user groups, allowed remote hosts, and AMQP restrictions."
    }
  }
}